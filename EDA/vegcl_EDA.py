# -*- coding: utf-8 -*-
""""Project.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OgjfaeyoHwtQ77qp7FhR12ixYs-VQaQ6
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("misrakahmed/vegetable-image-dataset")
path = os.path.join(path, 'Vegetable Images')
print("Path to dataset files:", path)

import os
from PIL import Image
import numpy as np
from tqdm import tqdm

processed_files = []
file_counts = {}  # Словарь для хранения количества обработанных файлов по полным путям к папкам
image_sizes = {}  # Словарь для хранения уникальных размеров изображений

def convert_to_matrix(image_path):
    # Проверяем расширение файла
    file_extension = os.path.splitext(image_path)[-1]
    if file_extension.lower() in ['.jpg', '.jpeg']:
        # Если файл уже был обработан, пропускаем его
        if image_path in processed_files:
            return

        try:
            # Открытие изображения
            img = Image.open(image_path)
            width, height = img.size
            size_str = f"{width}x{height}"

            # Преобразование изображения в массив NumPy
            array = np.asarray(img)

            # Сохранение массива в файл .npy
            save_path = os.path.splitext(image_path)[0] + ".npy"
            np.save(save_path, array)

            # Запоминание информации о размере изображения
            if size_str in image_sizes:
                image_sizes[size_str].append(image_path)
            else:
                image_sizes[size_str] = [image_path]

            # Добавление пути к файлу в список обработанных файлов
            processed_files.append(image_path)
        except Exception as e:
            print(f"Произошла ошибка при обработке файла {image_path}: {e}")

def process_folder(path):
    global file_counts

    print(f"\nОбрабатываю папку: {path}")

    for root, dirs, files in os.walk(path):
        full_dir = root
        jpg_files = [f for f in files if os.path.splitext(f)[-1].lower() in ['.jpg', '.jpeg']]
        file_count = len(jpg_files)
        file_counts[full_dir] = file_count

        with tqdm(total=file_count, desc=f"Обработка {os.path.basename(full_dir)}") as pbar:
            for file in jpg_files:
                file_path = os.path.join(root, file)
                convert_to_matrix(file_path)
                pbar.update()

def report_results():
    # Подсчет количества обработанных файлов
    num_processed = len(processed_files)
    print(f"\nОбработано {num_processed} изображений.")

    # Отчет о размерах изображений
    unique_sizes = list(image_sizes.keys())
    most_common_size = max(unique_sizes, key=lambda x: len(image_sizes[x]))
    most_common_count = len(image_sizes[most_common_size])

    print("\nРазмеры изображений:")
    for size_str, paths in image_sizes.items():
        count = len(paths)
        if count != most_common_count:
            print(f"Размер {size_str} встречается у {count} изображений: {paths}")
        else:
            print(f"Наиболее часто встречающийся размер: {size_str}, встречается у {count} изображений")

    # Отчет о количестве обработанных файлов по папкам
    print("\nКоличество обработанных файлов по папкам:")
    for dir_path, file_count in file_counts.items():
        print(f"В папке '{dir_path}' обработано {file_count} файлов.")

process_folder(path)
report_results()

"""Преобразуем матрицы обратно в изображения, чтобы проверить правильность их создания."""

import matplotlib.pyplot as plt

# Функция для загрузки и показа изображений
def show_images_in_grid(path_for_EDA, num_cols=10):
    files = [file for file in os.listdir(path_for_EDA) if file.endswith('.npy')]  # Фильтрация по расширению '.npy'
    files = files[:num_cols * 10]  # Берем первые 100 файлов (.npy)

    fig, axes = plt.subplots(nrows=10, ncols=num_cols, figsize=(16, 18))

    for ax, file in zip(axes.flat, files):
        matrix = np.load(os.path.join(path_for_EDA, file))
        image = Image.fromarray(matrix)
        ax.imshow(image)
        ax.axis('off')  # Отключаем оси

    plt.tight_layout()  # Улучшаем компоновку
    plt.show()

# Указываем папку с нужными изображениями
temp_dir = 'Carrot'

# Указываем путь к папке с файлами .npy
additional_dirs = ['test', temp_dir]

# Объединение базового пути с дополнительными каталогами
path_for_EDA = os.path.join(path, *additional_dirs)

show_images_in_grid(path_for_EDA)

"""Построение общей гистограммы: В этом случае все три канала объединяются в один общий массив, и строится одна общая гистограмма для всех пикселей изображения. Этот подход полезен, когда нужно оценить общее распределение яркостей независимо от конкретного канала."""

# Функция для построения гистограмм
def plot_histograms_in_grid(path_for_EDA, num_cols=10):
    files = [file for file in os.listdir(path_for_EDA) if file.endswith('.npy')]
    files = files[:num_cols * 10]  # Берем первые 100 файлов (.npy)

    fig, axes = plt.subplots(nrows=10, ncols=num_cols, figsize=(16, 18))

    for ax, file in zip(axes.flat, files):
        matrix = np.load(os.path.join(path_for_EDA, file))
        flattened_matrix = matrix.flatten()
        ax.hist(flattened_matrix, bins=256, density=True, color='b', alpha=0.5)
        ax.set_title(file[:-4])  # Название файла без расширения
        ax.tick_params(axis='both', which='major', labelsize=6)

    plt.tight_layout()  # Улучшаем компоновку
    plt.show()

plot_histograms_in_grid(path_for_EDA)

"""Построение отдельных гистограмм для каждого канала: Здесь создаются отдельные гистограммы для каждого из трех цветовых каналов (красный, зеленый, синий). Такой метод дает более детальную информацию о распределении яркости в каждом канале отдельно."""

# Функция для построения гистограмм
def plot_channel_histograms_in_grid(path_for_EDA, num_cols=10):
    files = [file for file in os.listdir(path_for_EDA) if file.endswith('.npy')]
    files = files[:num_cols * 10]  # Берем первые 100 файлов (.npy)

    fig, axes = plt.subplots(nrows=10, ncols=num_cols, figsize=(16, 18))

    for ax, file in zip(axes.flat, files):
        matrix = np.load(os.path.join(path_for_EDA, file))
        red_channel = matrix[:, :, 0].flatten()
        green_channel = matrix[:, :, 1].flatten()
        blue_channel = matrix[:, :, 2].flatten()

        ax.hist(red_channel, bins=256, density=True, color='r', alpha=0.5, label='Red')
        ax.hist(green_channel, bins=256, density=True, color='g', alpha=0.5, label='Green')
        ax.hist(blue_channel, bins=256, density=True, color='b', alpha=0.5, label='Blue')
        ax.legend(prop={'size': 6})
        ax.set_title(file[:-4])  # Название файла без расширения
        ax.tick_params(axis='both', which='major', labelsize=6)

    plt.tight_layout()  # Улучшаем компоновку
    plt.show()

plot_channel_histograms_in_grid(path_for_EDA)

"""Построение гистограмм интенсивности для каждого класса овощей для сравнения. (Только для датасета в папке train)"""

def get_images_from_folder(path):
    images = []
    for filename in os.listdir(path):
        if filename.endswith(".npy"):
            full_path = os.path.join(path, filename)
            images.append(np.load(full_path))
    return images

def plot_overlaid_histograms(base_path, folders):
    all_data = {}

    for folder in folders:
        folder_path = os.path.join(base_path, folder)
        images = get_images_from_folder(folder_path)
        all_pixels = np.concatenate([img.flatten() for img in images])
        all_data[folder] = all_pixels

    plt.figure(figsize=(12, 8))
    plt.title("Overlaid Histogram of Intensity Values by Folders")
    plt.xlabel("Pixel Value")
    plt.ylabel("Frequency")

    colors = ['b', 'g', 'r', 'c', 'm', 'y', 'k'] * len(folders)

    for i, (folder_name, pixels) in enumerate(all_data.items()):
        plt.hist(pixels, bins=256, density=True, color=colors[i], alpha=0.7, label=folder_name)

    plt.legend(loc='upper right')
    plt.grid(True)
    plt.show()

# Основной путь до папок с овощами
base_path = os.path.join(path, 'train')

# Список папок с овощами
folders = ["Bottle_Gourd", "Papaya", "Radish", "Cauliflower", "Bitter_Gourd",
           "Carrot", "Pumpkin", "Cabbage", "Brinjal", "Capsicum", "Tomato",
           "Cucumber", "Potato", "Broccoli", "Bean"]

plot_overlaid_histograms(base_path, folders)

"""Выводим измененное изображение (поворот на 90 градусов)."""

# Функция для загрузки и показа изображений
def show_modified_images_in_grid(path_for_EDA, num_cols=10):
    files = [file for file in os.listdir(path_for_EDA) if file.endswith('.npy')]  # Фильтрация по расширению '.npy'
    files = files[:num_cols * 10]  # Берем первые 100 файлов (.npy)

    fig, axes = plt.subplots(nrows=10, ncols=num_cols, figsize=(16, 18))

    for ax, file in zip(axes.flat, files):
        matrix = np.load(os.path.join(path_for_EDA, file))

        # Применяем операцию модификации изображения, поворот на 90° против часовой
        modified_matrix = np.rot90(matrix, k=1)
        image = Image.fromarray(modified_matrix)
        ax.imshow(image)
        ax.axis('off')  # Отключаем оси

    plt.tight_layout()  # Улучшаем компоновку
    plt.show()

show_modified_images_in_grid(path_for_EDA)