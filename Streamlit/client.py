import streamlit as st
import httpx
import asyncio

# –®–∏–∫–∞—Ä–Ω—ã–π CSS —Å—Ç–∏–ª—å –¥–ª—è —Ñ–æ–Ω–∞ –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
st.markdown(
    """
    <style>
    /* –§–æ–Ω –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è */
    .stApp {
        background-image: linear-gradient(to bottom, #ffdde1, #ee9ca7); /* —Ä–æ–∑–æ–≤—ã–π */
        background-attachment: fixed;
        color: black;
    }

    /* –°–∞–π–¥–±–∞—Ä —Å—Ç–∏–ª—å */
    [data-testid="stSidebar"] {
        background-image: linear-gradient(to top, #EE82EE, #DDA0DD, #BA55D3); /* –ì–ª–∞–º—É—Ä–Ω—ã–π —Å–∏—Ä–µ–Ω–µ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç */
        color: white;
    }

    /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Å–∞–π–¥–±–∞—Ä–µ */
    [data-testid="stSidebar"] h1, 
    [data-testid="stSidebar"] label {
        color: white;
        font-size: 30px;
        font-weight: bold;
    }
    </style>
    """,
    unsafe_allow_html=True
)

page = f'''
<style>
div[data-testid="stRadio"] label {{
        color: white !important; 
        font-size: 18px !important; 
        font-family: "Comic Sans MS", cursive !important;
    }}
</style>
'''
st.markdown(page, unsafe_allow_html = True)

BASE_URL = "http://127.0.0.1:8000"

async def train_model(data):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏."""
    async with httpx.AsyncClient(timeout=1000) as client:
        response = await client.post(f"{BASE_URL}/fit", json=data)
        response.raise_for_status()
        return response.json()

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("‚ú® Slaaaay ML App üíÖ")
st.subheader("–°–¥–µ–ª–∞–π –∏—Ö –∂–∏–∑–Ω—å —è—Ä—á–µ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏ ü§©")

# –ù–∞–≤–∏–≥–∞—Ü–∏—è
st.sidebar.title("üé® –ù–∞–≤–∏–≥–∞—Ü–∏—è")
page = st.sidebar.radio("–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª, bae üåà", ["–û–±—É—á–µ–Ω–∏–µ", "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"])

if page == "–û–±—É—á–µ–Ω–∏–µ":
    st.header("üëë –û–±—É—á–µ–Ω–∏–µ ML-–º–æ–¥–µ–ª–∏")
    st.write("–ó–∞–≥—Ä—É–∑–∏ —Å–≤–æ–π –¥–∞—Ç–∞—Å–µ—Ç–∏–∫, –º–∏–ª–∞—à–∫–∞ üòò")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç
    dataset = st.file_uploader("–í—ã–±–µ—Ä–∏ —Ñ–∞–π–ª", type=["zip"])
    
    # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞
    method = st.radio("–í—ã–±–µ—Ä–∏ –º–µ—Ç–æ–¥ –æ–±—É—á–µ–Ω–∏—è: ", 
                      ["SVC!", "LinearRegression!", "Tree!"], label_visibility="visible")
    
    # –ü–æ–¥—Å–∫–∞–∑–∫–∏
    if method == "SVC!":
        st.info("SVC (Support Vector Classifier) - —à–∏–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è! üë†ü•ë")
    elif method == "LinearRegression!":
        st.info("Linear Regression - —Ç–≤–æ–π –≥–ª–∞–º—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ üìàüíã")
    elif method == "Tree!":
        st.info("Tree - —Ä–∞–∑–±–µ—Ä—ë—Ç—Å—è –≤–æ –≤—Å—ë–º, –∫–∞–∫ –∏—Å—Ç–∏–Ω–Ω–∞—è –∫–æ—Ä–æ–ª–µ–≤–∞ üå≥‚ú®")

    if st.button("üíÉ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"):
        with st.spinner("‚ú® –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π..."):
                try:
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    results = loop.run_until_complete(train_model(dataset, method))
                    st.success("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                    st.json(results)
                except Exception as e:
                    st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
elif page == "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ":
    st.header("üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è - –º–∞–≥–∏—è –¥–∞–Ω–Ω—ã—Ö")
    st.write("–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –º–∞–≥–∏—è ‚ú®")
