import os
import logging
from logging.handlers import TimedRotatingFileHandler
import streamlit as st
import asyncio
import json
import httpx
import pandas as pd
import plotly.express as px

# –ü–∞–ø–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤
CURRENT_DIR = os.path.abspath(os.path.dirname(__file__))
LOG_FOLDER = os.path.join(CURRENT_DIR, "logs")
os.makedirs(LOG_FOLDER, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger("ml_app")
if not logger.hasHandlers():
    logger.setLevel(logging.INFO)
    handler = TimedRotatingFileHandler(
        filename=os.path.join(LOG_FOLDER, "ml_app.log"),
        when="midnight",  # –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤ –∫–∞–∂–¥—É—é –Ω–æ—á—å
        interval=1,
        backupCount=7,  # –•—Ä–∞–Ω–∏–º –ª–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        encoding="utf-8",
    )
    formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
    handler.setFormatter(formatter)
    logger.addHandler(handler)

def highlight(val):
    if pd.isna(val):
        return ''
    color = '#00FA9A' if val > 0.5 else '#FFC0CB' if val > 0.3 else '#F08080'
    return f'background-color: {color}; color: black; font-weight: bold; border: 1px solid gold;'

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.markdown(
    """
    <style>
    .stApp {
        background-image: linear-gradient(to bottom, #ffdde1, #ee9ca7); 
        background-attachment: fixed;
        color: black;
    }
    [data-testid="stSidebar"] {
        background-image: linear-gradient(to top, #EE82EE, #DDA0DD, #BA55D3); 
        color: white;
    }
    [data-testid="stSidebar"] h1, 
    [data-testid="stSidebar"] label {
        color: white;
        font-size: 30px;
        font-weight: bold;
    }
    [data-testid="stSidebar"] [role="radiogroup"] .stRadio label { 
        color: white;
        font-size: 25px;
        font-weight: bold;
    }
    </style>
    """,
    unsafe_allow_html=True
)

async def prediction(file, selected_model):
    """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏."""
    async with httpx.AsyncClient(timeout=1000) as client:
        try:
            response = await client.post(f"{BASE_URL}/api/predict", files={"file": (file.name, file.getvalue(), file.type)}, data={"selected_model": selected_model})
            response.raise_for_status()
            return response.json()
        except httpx.HTTPStatusError as e:
            error_detail = e.response.json().get("detail", "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
            raise RuntimeError(f"HTTP {e.response.status_code}: {error_detail}")
        except Exception as e:
            raise RuntimeError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

BASE_URL = "http://0.0.0.0:8000"

d = {"PCA + Logistic Regressionüï∂": "lgbm_color.joblib", "SIFT-HOG + Random Forestüå∏": "logreg_pca.joblib",\
      "Color Histogram + LightGBMüëõ": "rf_sift_hog.joblib", "Custom CNN (224px)‚ú®": "veg_vgg16_final.pt",\
      "VGG16 Transfer Learningüëë": "veg_cnn_final_224.pt"}

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("‚ú® Slaaaay ML App üíÖ")
st.subheader("–°–¥–µ–ª–∞–π –∏—Ö –∂–∏–∑–Ω—å —è—Ä—á–µ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏ ü§©")

st.header("üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è - –º–∞–≥–∏—è –¥–∞–Ω–Ω—ã—Ö")
st.write("–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –º–∞–≥–∏—è ‚ú®")
st.write("–ó–∞–≥—Ä—É–∑–∏ —Å–≤–æ–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –º–∏–ª–∞—à–∫–∞ üòò")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
file = st.file_uploader("–í—ã–±–µ—Ä–∏ —Ñ–∞–π–ª", type=["jpg", "png", "jpeg"])
if file is not None:
    st.write("–í–æ—Ç —Ç–≤–æ—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, queen üëë")
    st.image(file, caption="–¢–≤–æ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üíñ", use_container_width=True)
selected_model = st.radio(
    "–í—ã–±–µ—Ä–∏ –º–µ—Ç–æ–¥:",
    ["PCA + Logistic Regressionüï∂", "SIFT-HOG + Random Forestüå∏", "Color Histogram + LightGBMüëõ", "Custom CNN (224px)‚ú®", "VGG16 Transfer Learningüëë"],
)
if selected_model == "PCA + Logistic Regressionüï∂":
    st.info("–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –ø–æ –ø—Ä–∏–∑–Ω–∞–∫–∞–º –ø–æ—Å–ª–µ PCA üë†ü•ë")
elif selected_model == "SIFT-HOG + Random Forestüå∏":
    st.info("–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è ML-–º–æ–¥–µ–ª—å –Ω–∞ —Ñ–∏—á–∞—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π üìàüíã")
elif selected_model == "Color Histogram + LightGBMüëõ":
    st.info("–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –±—É—Å—Ç–∏–Ω–≥ –Ω–∞ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞—Ö —Ü–≤–µ—Ç–∞ üíÉüëõ")
elif selected_model == "Custom CNN (224px)‚ú®":
    st.info("–ö–∞—Å—Ç–æ–º–Ω–∞—è —Å–≤–µ—Ä—Ç–æ—á–Ω–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å (—Ä–∞–∑–º–µ—Ä 224√ó224) üíÖüíã")
elif selected_model == "VGG16 Transfer Learningüëë":
    st.info("–î–æ–æ–±—É—á–µ–Ω–Ω–∞—è –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å VGG16 üåàüòò")

if st.button("üíÉ –ù–∞—á–∞—Ç—å –º–∞–≥–∏—á–∏—Ç—å", disabled=(file is None or not selected_model)):
    with st.spinner("üîÆ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π..."):
        container = st.empty()
        try:
            logger.info(f"–ù–∞—á–∞—Ç–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏ {selected_model}")
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            results = loop.run_until_complete(prediction(file, d[selected_model]))
            phrase = results.get("phrase", "–ú–∞–≥–∏—è –≤ –¥–µ–ª–µ, bae!")
            prediction = results.get("prediction", "ü§∑‚Äç‚ôÄÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            container.success("‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã!")
            st.markdown(f"### {phrase} **{prediction}** üí´")
            logger.info(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏ {selected_model} —É—Å–ø–µ—à–Ω–æ: {phrase} {prediction}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ {selected_model}: {str(e)}")
            container.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")