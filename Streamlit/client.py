import streamlit as st
import httpx
import asyncio
import pandas as pd
import time


st.markdown(
    """
    <style>
    .stApp {
        background-image: linear-gradient(to bottom, #ffdde1, #ee9ca7); 
        background-attachment: fixed;
        color: black;
    }
    [data-testid="stSidebar"] {
        background-image: linear-gradient(to top, #EE82EE, #DDA0DD, #BA55D3); 
        color: white;
    }
    [data-testid="stSidebar"] h1, 
    [data-testid="stSidebar"] label {
        color: white;
        font-size: 30px;
        font-weight: bold;
    }
    [data-testid="stSidebar"] [role="radiogroup"] .stRadio label { 
        color: white;
        font-size: 25px;
        font-weight: bold;
    }
    </style>
    """,
    unsafe_allow_html=True
)

BASE_URL = "http://127.0.0.1:8000"

async def train_model(file, model, model_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏."""
    time.sleep(2)
    print(model)
    return {"message": "–û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!", "accuracy": 98.7}

async def describe_data(file):
    pass

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("‚ú® Slaaaay ML App üíÖ")
st.subheader("–°–¥–µ–ª–∞–π –∏—Ö –∂–∏–∑–Ω—å —è—Ä—á–µ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏ ü§©")

st.sidebar.title("üé® –ù–∞–≤–∏–≥–∞—Ü–∏—è")
st.sidebar.write("–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª, bae üåà")
page = st.sidebar.radio("–†–∞–∑–¥–µ–ª—ã:", ["–û–±—É—á–µ–Ω–∏–µ", "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"])

if page == "–û–±—É—á–µ–Ω–∏–µ":
    st.header("üëë –û–±—É—á–µ–Ω–∏–µ ML-–º–æ–¥–µ–ª–∏")
    st.write("–ó–∞–≥—Ä—É–∑–∏ —Å–≤–æ–π –¥–∞—Ç–∞—Å–µ—Ç–∏–∫, –º–∏–ª–∞—à–∫–∞ üòò")
    
    file = st.file_uploader("–í—ã–±–µ—Ä–∏ —Ñ–∞–π–ª", type=["zip"])
    st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", disabled=(file is None))
    # if file is not None and st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"):
    #     data = describe_data(file)
    #     st.write(data.describe())

    st.write("–í—ã–±–µ—Ä–∏ –º–µ—Ç–æ–¥ –æ–±—É—á–µ–Ω–∏—è, my sun üåà ")
    method = st.radio("", 
                      ["SVCüï∂", "LogisticRegressionüå∏", "RandomForestClassifierüëõ"])
    if method == "SVCüï∂":
        st.info("SVC (Support Vector Classifier) - —à–∏–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è! üë†ü•ë")
        st.write("–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã üåπ")
        C = st.number_input("C", value=1.0)
        kernel = st.selectbox("Kernel", ["linear", "rbf"], index=1)
        —Ålass_weight = st.selectbox("Class weight", ["balanced", None])
        parameters = f"C={C}, kernel='{kernel}', class_weight='{—Ålass_weight}'"
    elif method == "LogisticRegressionüå∏":
        st.info("Logistic Regression - —Ç–≤–æ–π –≥–ª–∞–º—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ üìàüíã")
        st.write("–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã üåπ")
        C = st.number_input("C", value=1.0)
        max_iter = st.number_input("Max iter", value=100)
        parameters = f"C={C}, max_iter={max_iter}"
    elif method == "RandomForestClassifierüëõ":
        st.info("RandomForestClassifierüëõ - —Ä–∞–∑–±–µ—Ä—ë—Ç—Å—è –≤–æ –≤—Å—ë–º, –∫–∞–∫ –∏—Å—Ç–∏–Ω–Ω–∞—è –∫–æ—Ä–æ–ª–µ–≤–∞ üå≥‚ú®")
        st.write("–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã üåπ")
        n_estimators = st.number_input("n_estimators", value=100)
        parameters = f"n_estimators={n_estimators}"
    st.write("–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è –∏ —è –Ω–∞–∑–æ–≤—É –º–æ–¥–µ–ª—å –≤ —á–µ—Å—Ç—å —Ç–µ–±—è üòò")
    model_id = st.text_input("ID –º–æ–¥–µ–ª–∏", value = f"{method[:-1]}")
    if st.button("üíÉ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏", disabled=(file is None) or (model_id == "")):
        with st.spinner("‚ú® –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏..."):
            try:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                results = loop.run_until_complete(train_model(file, f"{method[:-1]}({parameters})", model_id))
                st.success("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                st.json(results)
            except Exception as e:
                st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

elif page == "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ":
    st.header("üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è - –º–∞–≥–∏—è –¥–∞–Ω–Ω—ã—Ö")
    st.write("–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –º–∞–≥–∏—è ‚ú®")