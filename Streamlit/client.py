import os
import logging
from logging.handlers import TimedRotatingFileHandler
import streamlit as st
import asyncio
import time

# –ü–∞–ø–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤
LOG_FOLDER = "logs"
os.makedirs(LOG_FOLDER, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger("ml_app")
logger.setLevel(logging.INFO)
handler = TimedRotatingFileHandler(
    filename=os.path.join(LOG_FOLDER, "ml_app.log"),
    when="midnight",  # –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤ –∫–∞–∂–¥—É—é –Ω–æ—á—å
    interval=1,
    backupCount=7,  # –•—Ä–∞–Ω–∏–º –ª–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    encoding="utf-8",
)
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
handler.setFormatter(formatter)
logger.addHandler(handler)


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
async def train_model(file, model, model_id, update_container):
    logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ {model_id} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {model}")
    for i in range(1, 6):
        await asyncio.sleep(1)  # –û–±–Ω–æ–≤–ª—è–µ–º—Å—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        update_container.markdown(f"**–û–±—É—á–µ–Ω–∏–µ: {i * 20}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ...**")
        logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ {model_id}: {i * 20}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    logger.info(f"–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ {model_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    return {"message": f"–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ {model_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", "accuracy": 98.7}


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
async def prediction(file, model_id, update_container):
    logger.info(f"–ù–∞—á–∞–ª–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ {model_id}")
    for i in range(1, 6):
        await asyncio.sleep(1)  # –û–±–Ω–æ–≤–ª—è–µ–º—Å—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        update_container.markdown(f"**–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {i * 20}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ...**")
        logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ {model_id}: {i * 20}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    logger.info(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ {model_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    return {"message": f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ {model_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", "prediction": 98.7}

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.markdown(
    """
    <style>
    .stApp {
        background-image: linear-gradient(to bottom, #ffdde1, #ee9ca7); 
        background-attachment: fixed;
        color: black;
    }
    [data-testid="stSidebar"] {
        background-image: linear-gradient(to top, #EE82EE, #DDA0DD, #BA55D3); 
        color: white;
    }
    [data-testid="stSidebar"] h1, 
    [data-testid="stSidebar"] label {
        color: white;
        font-size: 30px;
        font-weight: bold;
    }
    [data-testid="stSidebar"] [role="radiogroup"] .stRadio label { 
        color: white;
        font-size: 25px;
        font-weight: bold;
    }
    </style>
    """,
    unsafe_allow_html=True
)

BASE_URL = "http://127.0.0.1:8000"

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("‚ú® Slaaaay ML App üíÖ")
st.subheader("–°–¥–µ–ª–∞–π –∏—Ö –∂–∏–∑–Ω—å —è—Ä—á–µ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏ ü§©")

st.sidebar.title("üé® –ù–∞–≤–∏–≥–∞—Ü–∏—è")
st.sidebar.write("–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª, bae üåà")
page = st.sidebar.radio(" ", ["–û–±—É—á–µ–Ω–∏–µ", "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"])

if page == "–û–±—É—á–µ–Ω–∏–µ":
    st.header("üëë –û–±—É—á–µ–Ω–∏–µ ML-–º–æ–¥–µ–ª–∏")
    st.write("–ó–∞–≥—Ä—É–∑–∏ —Å–≤–æ–π –¥–∞—Ç–∞—Å–µ—Ç–∏–∫, –º–∏–ª–∞—à–∫–∞ üòò")

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    file = st.file_uploader("–í—ã–±–µ—Ä–∏ —Ñ–∞–π–ª", type=["zip"])

    # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –æ–±—É—á–µ–Ω–∏—è
    method = st.radio(
        "–í—ã–±–µ—Ä–∏ –º–µ—Ç–æ–¥:",
        ["SVCüï∂", "LogisticRegressionüå∏", "RandomForestClassifierüëõ"],
    )
    st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", disabled = file is None)

    if method == "SVCüï∂":
        st.info("SVC (Support Vector Classifier) - —à–∏–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è! üë†ü•ë")
        C = st.number_input("C", value=1.0)
        kernel = st.selectbox("Kernel", ["linear", "rbf"], index=1)
        parameters = f"C={C}, kernel='{kernel}'"
    elif method == "LogisticRegressionüå∏":
        st.info("Logistic Regression - —Ç–≤–æ–π –≥–ª–∞–º—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ üìàüíã")
        C = st.number_input("C", value=1.0)
        max_iter = st.number_input("Max iter", value=500)
        parameters = f"C={C}, max_iter={max_iter}"
    elif method == "RandomForestClassifierüëõ":
        st.info("RandomForestClassifierüëõ - —Ä–∞–∑–±–µ—Ä—ë—Ç—Å—è –≤–æ –≤—Å—ë–º, –∫–∞–∫ –∏—Å—Ç–∏–Ω–Ω–∞—è –∫–æ—Ä–æ–ª–µ–≤–∞ üå≥‚ú®")
        n_estimators = st.number_input("n_estimators", value=100)
        parameters = f"n_estimators={n_estimators}"

    st.write("–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è –∏ —è –Ω–∞–∑–æ–≤—É –º–æ–¥–µ–ª—å –≤ —á–µ—Å—Ç—å —Ç–µ–±—è üíã")
    model_id = st.text_input("ID –º–æ–¥–µ–ª–∏", value=f"{method[:-1]}")

    if st.button("üíÉ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏", disabled=(file is None or not model_id)):
        container = st.empty()
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            results = loop.run_until_complete(train_model(file, f"{method[:-1]}({parameters})", model_id, container))
            container.success("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            st.json(results)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
            container.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
        

elif page == "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ":
    st.header("üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è - –º–∞–≥–∏—è –¥–∞–Ω–Ω—ã—Ö")
    st.write("–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –º–∞–≥–∏—è ‚ú®")
    st.write("–ó–∞–≥—Ä—É–∑–∏ —Å–≤–æ–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –º–∏–ª–∞—à–∫–∞ üòò")

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    file = st.file_uploader("–í—ã–±–µ—Ä–∏ —Ñ–∞–π–ª", type=["zip"])
    st.write("–ù–∞–ø–∏—à–∏ –∏–º—è –º–æ–¥–µ–ª–∏ üíã")
    model_id = st.text_input("ID –º–æ–¥–µ–ª–∏", value=f"SVC")
    if st.button("üíÉ –ù–∞—á–∞—Ç—å –º–∞–≥–∏—á–∏—Ç—å", disabled=(file is None or not model_id)):
        container = st.empty()
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            results = loop.run_until_complete(prediction(file, model_id, container))
            container.success("‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã!")
            st.json(results)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
            container.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")