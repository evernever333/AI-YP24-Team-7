import os
import logging
from logging.handlers import TimedRotatingFileHandler
import streamlit as st
import asyncio
import json
import httpx
import pandas as pd
import plotly.express as px

# –ü–∞–ø–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤
CURRENT_DIR = os.path.abspath(os.path.dirname(__file__))
LOG_FOLDER = os.path.join(CURRENT_DIR, "logs")
os.makedirs(LOG_FOLDER, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger("ml_app")
if not logger.hasHandlers():
    logger.setLevel(logging.INFO)
    handler = TimedRotatingFileHandler(
        filename=os.path.join(LOG_FOLDER, "ml_app.log"),
        when="midnight",  # –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤ –∫–∞–∂–¥—É—é –Ω–æ—á—å
        interval=1,
        backupCount=7,  # –•—Ä–∞–Ω–∏–º –ª–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        encoding="utf-8",
    )
    formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
    handler.setFormatter(formatter)
    logger.addHandler(handler)

def highlight(val):
    if pd.isna(val):
        return ''
    color = '#00FA9A' if val > 0.5 else '#FFC0CB' if val > 0.3 else '#F08080'
    return f'background-color: {color}; color: black; font-weight: bold; border: 1px solid gold;'

# –ø–æ–ª—É—á–µ–Ω–∏–µ eda
async def eda(file):
    """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏."""
    async with httpx.AsyncClient(timeout=1000) as client:
        try:
            response = await client.post(f"{BASE_URL}/eda", files={"file": (file.name, file.getvalue(), file.type)})
            response.raise_for_status()
            return response.json()
        except httpx.HTTPStatusError as e:
            error_detail = e.response.json().get("detail", "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
            raise RuntimeError(f"HTTP {e.response.status_code}: {error_detail}")
        except Exception as e:
            raise RuntimeError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

# –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
async def train_model(config):
    """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏."""
    async with httpx.AsyncClient(timeout=1000) as client:
        try:
            response = await client.post(f"{BASE_URL}/fit", data={"model_data": config})
            response.raise_for_status()
            return response.json()
        except httpx.HTTPStatusError as e:
            error_detail = e.response.json().get("detail", "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
            raise RuntimeError(f"HTTP {e.response.status_code}: {error_detail}")
        except Exception as e:
            raise RuntimeError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")


# –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
async def prediction(file, model_id):
    """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏."""
    async with httpx.AsyncClient(timeout=1000) as client:
        try:
            response = await client.post(f"{BASE_URL}/predict", files={"file": (file.name, file.getvalue(), file.type)}, data={"model_id": model_id})
            response.raise_for_status()
            return response.json()
        except httpx.HTTPStatusError as e:
            error_detail = e.response.json().get("detail", "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
            raise RuntimeError(f"HTTP {e.response.status_code}: {error_detail}")
        except Exception as e:
            raise RuntimeError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        
# —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
async def list_models():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π."""
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(f"{BASE_URL}/list_models")
            response.raise_for_status()
            return response.json()
        except httpx.HTTPStatusError as e:
            error_detail = e.response.json().get("detail", "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
            raise RuntimeError(f"HTTP {e.response.status_code}: {error_detail}")
        except Exception as e:
            raise RuntimeError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

# —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
async def remove_all_models():
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π."""
    async with httpx.AsyncClient(timeout=1000) as client:
        try:
            response = await client.delete(f"{BASE_URL}/remove_all")
            response.raise_for_status()
            return response.json()
        except httpx.HTTPStatusError as e:
            error_detail = e.response.json().get("detail", "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
            raise RuntimeError(f"HTTP {e.response.status_code}: {error_detail}")
        except Exception as e:
            raise RuntimeError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.markdown(
    """
    <style>
    .stApp {
        background-image: linear-gradient(to bottom, #ffdde1, #ee9ca7); 
        background-attachment: fixed;
        color: black;
    }
    [data-testid="stSidebar"] {
        background-image: linear-gradient(to top, #EE82EE, #DDA0DD, #BA55D3); 
        color: white;
    }
    [data-testid="stSidebar"] h1, 
    [data-testid="stSidebar"] label {
        color: white;
        font-size: 30px;
        font-weight: bold;
    }
    [data-testid="stSidebar"] [role="radiogroup"] .stRadio label { 
        color: white;
        font-size: 25px;
        font-weight: bold;
    }
    </style>
    """,
    unsafe_allow_html=True
)

BASE_URL = "http://0.0.0.0:8000"

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("‚ú® Slaaaay ML App üíÖ")
st.subheader("–°–¥–µ–ª–∞–π –∏—Ö –∂–∏–∑–Ω—å —è—Ä—á–µ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏ ü§©")

st.sidebar.title("üé® –ù–∞–≤–∏–≥–∞—Ü–∏—è")
st.sidebar.write("–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª, bae üåà")
page = st.sidebar.radio(" ", ["EDA", "–û–±—É—á–µ–Ω–∏–µ", "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", "–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π", "–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π"])

if page == "EDA":
    st.header("üìä EDA ML-–º–æ–¥–µ–ª–∏")
    st.write("–ó–∞–≥—Ä—É–∑–∏ —Å–≤–æ–π –¥–∞—Ç–∞—Å–µ—Ç–∏–∫, –º–∏–ª–∞—à–∫–∞ üòò")

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    file = st.file_uploader("–í—ã–±–µ—Ä–∏ —Ñ–∞–π–ª", type=["zip"])

    if st.button("üíÉ –ù–∞—á–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ EDA", disabled = file is None):
        with st.spinner("‚ú® –ü–æ–ª—É—á–µ–Ω–∏–µ EDA..."):
            container = st.empty()
            try:
                logger.info(f"–ù–∞—á–∞—Ç–æ –ø–æ–ª—É—á–µ–Ω–∏–µ EDA")
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                results = loop.run_until_complete(eda(file))
                st.success(results["message"])
                st.markdown("### üöÇ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –≤ Train:")
                train_class_dist = results["train_class_dist"]
                train_df = pd.DataFrame(
                    list(train_class_dist.items()), 
                    columns=["–ö–ª–∞—Å—Å", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
                )
                train_df.index += 1  # –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é —Å 1
                st.dataframe(train_df)

                st.markdown("### üß™ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –≤ Test:")
                test_class_dist = results["test_class_dist"]
                test_df = pd.DataFrame(
                    list(test_class_dist.items()), 
                    columns=["–ö–ª–∞—Å—Å", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
                )
                test_df.index += 1  # –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é —Å 1
                st.dataframe(test_df)
                
                st.markdown("### üñºÔ∏è –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
                st.image(results["anomaly_image"], caption="‚ú® –†–µ–∑—É–ª—å—Ç–∞—Ç EDA", use_container_width=True)

                logger.info(f"–ó–∞–∫–æ–Ω—á–µ–Ω–æ –ø–æ–ª—É—á–µ–Ω–∏–µ EDA")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ eda: {str(e)}")
                container.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

if page == "–û–±—É—á–µ–Ω–∏–µ":
    st.header("üëë –û–±—É—á–µ–Ω–∏–µ ML-–º–æ–¥–µ–ª–∏")

    # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –æ–±—É—á–µ–Ω–∏—è
    method = st.radio(
        "–í—ã–±–µ—Ä–∏ –º–µ—Ç–æ–¥:",
        ["SVCüï∂", "LogisticRegressionüå∏", "RandomForestClassifierüëõ"],
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏
    params = {}
    if method == "SVCüï∂":
        st.info("SVC (Support Vector Classifier) - —à–∏–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è! üë†ü•ë")
        params["C"] = st.number_input("C", value=1.0)
        params["kernel"] = st.selectbox("Kernel", ["linear", "rbf"], index=1)
        params["class_weight"] = st.selectbox("Class weight", ["None", "balanced"], index=1)
    elif method == "LogisticRegressionüå∏":
        st.info("Logistic Regression - —Ç–≤–æ–π –≥–ª–∞–º—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ üìàüíã")
        params["C"] = st.number_input("C", value=1.0)
        params["max_iter"] = st.number_input("Max iter", value=500)
    elif method == "RandomForestClassifierüëõ":
        st.info("RandomForestClassifierüëõ - —Ä–∞–∑–±–µ—Ä—ë—Ç—Å—è –≤–æ –≤—Å—ë–º, –∫–∞–∫ –∏—Å—Ç–∏–Ω–Ω–∞—è –∫–æ—Ä–æ–ª–µ–≤–∞ üå≥‚ú®")
        params["n_estimators"] = st.number_input("n_estimators", value=100)

    st.write("–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è –∏ —è –Ω–∞–∑–æ–≤—É –º–æ–¥–µ–ª—å –≤ —á–µ—Å—Ç—å —Ç–µ–±—è üíã")
    model_id = st.text_input("ID –º–æ–¥–µ–ª–∏", value=f"{method[:-1]}")

    if st.button("üíÉ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏", disabled = not model_id):
        with st.spinner("‚ú® –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏..."):
            container = st.empty()
            try:
                config = json.dumps({
                    "model": method[:-1],
                    "params": params,
                    "model_id": model_id,
                })
                logger.info(f"–ù–∞—á–∞—Ç–æ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å ID: {model_id}, –º–µ—Ç–æ–¥: {method[:-1]}, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                results = loop.run_until_complete(train_model(config))
                container.success("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                st.markdown(
                    f"""
                    ### üåü –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è:
                    - **ID –º–æ–¥–µ–ª–∏:** `{results['id']}`
                    - **–¢–æ—á–Ω–æ—Å—Ç—å:** `{results['accuracy']:.2%}`
                    """
                )
                df = pd.DataFrame(results['report']).T.reset_index()
                df = df.rename(columns={'index': 'Class'})
                st.title("üíÖ Slaaaay –¢–∞–±–ª–∏—Ü–∞ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                st.write("–í–∑–≥–ª—è–Ω–∏ –Ω–∞ —ç—Ç—É –∫—Ä–∞—Å–æ—Ç–∫—É —Ç–∞–±–ª–∏—Ü—É ‚ú®")
                st.dataframe(
                    df.style.applymap(highlight, subset=['precision', 'recall', 'f1-score'])
                )
                st.subheader("üé® –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")

                for metric in ['precision', 'recall', 'f1-score']:
                    fig = px.pie(df[:-2], values=metric, names='Class', title=f"{metric.title()} –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ üíñ")
                    fig.update_traces(textinfo='percent+label', pull=[0.05]*len(df))
                    st.plotly_chart(fig)
                logger.info(f"–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ {model_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏ {model_id}: {str(e)}")
                container.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


elif page == "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ":
    st.header("üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è - –º–∞–≥–∏—è –¥–∞–Ω–Ω—ã—Ö")
    st.write("–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –º–∞–≥–∏—è ‚ú®")
    st.write("–ó–∞–≥—Ä—É–∑–∏ —Å–≤–æ–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –º–∏–ª–∞—à–∫–∞ üòò")

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    file = st.file_uploader("–í—ã–±–µ—Ä–∏ —Ñ–∞–π–ª", type=["jpg", "png", "jpeg"])
    if file is not None:
        st.write("–í–æ—Ç —Ç–≤–æ—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, queen üëë")
        st.image(file, caption="–¢–≤–æ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üíñ", use_container_width=True)
    
    st.write("–ù–∞–ø–∏—à–∏ –∏–º—è –º–æ–¥–µ–ª–∏ üíã")
    model_id = st.text_input("ID –º–æ–¥–µ–ª–∏", value="SVC")
    if st.button("üíÉ –ù–∞—á–∞—Ç—å –º–∞–≥–∏—á–∏—Ç—å", disabled=(file is None or not model_id)):
        with st.spinner("üîÆ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π..."):
            container = st.empty()
            try:
                logger.info(f"–ù–∞—á–∞—Ç–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏ {model_id}")
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                results = loop.run_until_complete(prediction(file, model_id))
                phrase = results.get("phrase", "–ú–∞–≥–∏—è –≤ –¥–µ–ª–µ, bae!")
                prediction = results.get("prediction", "ü§∑‚Äç‚ôÄÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                container.success("‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã!")
                st.markdown(f"### {phrase} **{prediction}** üí´")
                logger.info(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏ {model_id} —É—Å–ø–µ—à–Ω–æ: {phrase} {prediction}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ {model_id}: {str(e)}")
                container.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

elif page == "–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π":
    st.header("üìÇ –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π")
    if st.button("üìã –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π"):
        with st.spinner("üìÇ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π..."):
            try:
                logger.info("–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π")
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                models = loop.run_until_complete(list_models())
                if models:
                    st.markdown("### üìã –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π:")
                    for model in models:
                        st.markdown(f"- **ID:** `{model['id']}`")
                    st.success("‚úÖ –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω!")
                    logger.info(f"–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω: {models}")
                else:
                    st.info("–ü–æ–∫–∞ –Ω–µ—Ç –º–æ–¥–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ. –ó–∞–≥—Ä—É–∑–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è! üíñ")
                    logger.info(f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –º–æ–¥–µ–ª–µ–π")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {str(e)}")
                st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

elif page == "–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π":
    st.header("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π")
    if st.button("‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –º–æ–¥–µ–ª–∏"):
        with st.spinner("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π..."):
            try:
                logger.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π")
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                results = loop.run_until_complete(remove_all_models())
                if results:
                    st.markdown("### ‚ùå –£–¥–∞–ª–µ–Ω–æ:")
                    for result in results:
                        st.markdown(f"- **ID:** `{result['id']}`")
                    st.success("‚úÖ –í—Å–µ –º–æ–¥–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã!")
                    logger.info(f"–í—Å–µ –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã: {results}")
                else:
                    st.info("–ü–æ–∫–∞ –Ω–µ—Ç –º–æ–¥–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ. –ó–∞–≥—Ä—É–∑–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è! üíñ")
                    logger.info(f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –º–æ–¥–µ–ª–µ–π")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π: {str(e)}")
                st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

